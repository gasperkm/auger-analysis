#!/bin/bash
   
   # Functions for coloring
   function colorecho
   {
     echo -e$2 "\033[33m$1\033[39m"
   }
   
   function errorecho
   {
     echo -e "\031[33m$1\033[39m"
   }
   
   # Function to display help text
   function helptext()
   {
     colorecho "#------------------------------"
     colorecho "# Configure instructions: -----"
     colorecho "#------------------------------"
     colorecho ""
     colorecho "./configure [option] [install directories]"
     colorecho ""
     colorecho "[option] = Option for configure:"
     colorecho "  help       Display configure instructions."
#     colorecho "  nomake     Configure installation, but do not run make."
     colorecho "  all        Configure installation and afterwards compile with make."
     colorecho "  old        Same as all, but compile with old ADST version only."
     colorecho "  new        Same as nomake, but compile with new ADST version only."
     colorecho "  support    Same as all, but only compile support programs (not main GUI)."
     colorecho "  clean      Clean the installation directory. Does not clean the results directory."
     colorecho "  compress   Compress the source code in a tar-ball."
     colorecho ""
     colorecho "[install directories] = Directories where ROOT and NET-SNMP are installed (when running with superuser, this is important, otherwise optional):"
     colorecho "  --root-install=/root/install/directory"
     colorecho ""
     colorecho "Example:"
     colorecho "  ./configure all --root-install=/home/user/root"
     colorecho ""
     colorecho "#------------------------------"
   }
   
#--- Start the configuration -----------------------------------------------
   # Check for arguments
   if [ "$1" == "" ]; then
     errorecho "Error! No arguments supplied."
     echo ""
     helptext
     exit 1
   else
     # When using help, only display help and then exit
     if  [ "$1" == "help" ]; then
       helptext
       exit 0
     fi
   
     # Print help and exit if we give a wrong first argument
     if  [ "$1" != "all" ] && [ "$1" != "old" ] && [ "$1" != "new" ] && [ "$1" != "support" ] && [ "$1" != "lib" ] && [ "$1" != "clean" ] && [ "$1" != "compress" ]; then
       errorecho "Error! Wrong configuration option selected (first argument)."
       echo ""
       helptext
       exit 1
     fi
   
     startdir=$PWD
   
     # Check arguments for ROOT install directory
     rootsearch="--root-install="
     rootdirectory=-1
     for var in $@
     do
       case $var in
         "$rootsearch"*)
           rootdirectory=${var#$rootsearch}
           echo "ROOT directory: $rootdirectory";;
         *) ;;
       esac 
     done   
    
     # Check for installation directory of ROOT (ROOTSYS) - if variables not currently set, remind user to set them before running make
     if [ "$1" != "clean" ] && [ "$1" != "compress" ]; then
       if [ $rootdirectory != -1 ]; then
         printenv ROOTSYS > /dev/null
         if [ $? != 0 ]; then
           colorecho "ROOT environment variables not set. Please run \"source $rootdirectory/bin/thisroot.sh\", before using make."
         fi
       else
         colorecho "Before running make, please make sure ROOT environment variables are set."
       fi
     fi
   
     # When using compress, only create a tar-ball and then exit
     if [ "$1" == "compress" ]; then
       echo "TODO: compression"
       cd $startdir
       if [ ! -d $startdir/auger-analysis ]; then
         mkdir $startdir/auger-analysis
         mkdir $startdir/auger-analysis/results
         mkdir $startdir/auger-analysis/layout
         mkdir $startdir/auger-analysis/setup
         echo "Copying files to temporary directory $startdir/auger-analysis..."
         cp -r $startdir/configure $startdir/include $startdir/input $startdir/src $startdir/auger-analysis/
         cp -r $startdir/layout/default.layout $startdir/auger-analysis/layout/
         cp -r $startdir/setup/setup_TMVA.sh $startdir/setup/setup_ADST.sh $startdir/setup/*.tar.gz $startdir/setup/*.tgz $startdir/setup/*.in $startdir/auger-analysis/setup/
#         cd $startdir/auger-analysis/setup
#         for f in *.tar.gz
#         do
#           tar -zxf $f
#         done
         cd $startdir
         echo "default.layout" > $startdir/auger-analysis/layout/selected_layout.txt
         cd $startdir/auger-analysis
         echo "Cleaning the base directory in $startdir/auger-analysis..."
         rm -f ./*.bak
         echo "Cleaning the subdirectories of $startdir/auger-analysis..."
         rm -f ./*/*.bak
         cd $startdir/auger-analysis/src
         rm -f ./*/*.bak
         cd $startdir/auger-analysis/include
         rm -f ./*/*.bak
         cd $startdir
         echo "Creating a tar-ball auger-analysis.tar.gz..."
         tar -zcf $startdir/auger-analysis.tar.gz ./auger-analysis
         echo "Removing the temporary directory $startdir/auger-analysis..."
         rm -fr $startdir/auger-analysis
         exit 0
       else
         errorecho "Error! Directory $startdir/auger-analysis already exists."
         exit 1
       fi
     fi
   
     # Configure the workstation information and directory of program (0 if we find something and 1 otherwise)
     basedir=$(echo $startdir | sed 's/\//\\\//g')
   
     if [ "$1" == "all" ] || [ "$1" == "old" ] || [ "$1" == "new" ] || [ "$1" == "support" ] || [ "$1" == "lib" ]; then
       for ver in 1 2
       do
	 # Find path-to-installation and replace it with the base directory
         grep -q "#define rootdir \"path-to-installation\"" $startdir/setup/workstation.h.in
         if [ $? == 0 ]; then
           sed "s/path-to-installation/$basedir/g" $startdir/setup/workstation.h.in > $startdir/setup/workstation.h.mid
         fi
	 # Find OFFVER SOMETHING and set it depending on the current version (1 = old, 2 = new)
         grep -q "#define OFFVER SOMETHING" $startdir/setup/workstation.h.mid
         if [ $? == 0 ]; then
           if [ $ver == 1 ]; then
              sed "s/OFFVER SOMETHING/OFFVER 0/g" $startdir/setup/workstation.h.mid > $startdir/include/workstation.h
   	      rm -f $startdir/setup/workstation.h.mid
           elif [ $ver == 2 ]; then
              sed "s/OFFVER SOMETHING/OFFVER 1/g" $startdir/setup/workstation.h.mid > $startdir/include/workstation.h
   	      rm -f $startdir/setup/workstation.h.mid
           else
              errorecho "Error! The entered offline version is incorrect. Use old or new."
   	      rm -f $startdir/setup/workstation.h.mid
              exit 1
           fi
         fi
   
	 # Find BASEDIR from the plots directory header (where TMVA plots will be saved)
         grep -q "BASEDIR" $startdir/setup/plotsdir.h.in
         if [ $? == 0 ]; then
           sed "s/BASEDIR/$basedir/g" $startdir/setup/plotsdir.h.in > $startdir/src/root_mva/plotsdir.h
         fi
   
	 # Find :BASEDIR/src: from the TMVA source, so that it correctly searches for TMVA plotting scripts
         grep -q ":BASEDIR/src:" $startdir/setup/TMVAGui.C.in
         if [ $? == 0 ]; then
           sed "s/BASEDIR/$basedir/g" $startdir/setup/TMVAGui.C.in > $startdir/src/root_mva/TMVAGui.C
         fi
   
	 # Copy the makefile into base directory
         cp $startdir/setup/Makefile.in $startdir/Makefile
      
	 # Create library directory, if it doesn't exist yet
         if [ ! -d $startdir/lib ]; then
           mkdir $startdir/lib
         fi
   
         # Create the two ADST versions (old and new)
         if [ $ver == 1 ]; then
           source $startdir/setup/setup_ADST.sh $startdir old
         elif [ $ver == 2 ]; then
           source $startdir/setup/setup_ADST.sh $startdir new
         fi

   	 if [ ! -d $ADSTROOT ]; then
   	   cd $startdir/setup
   	   for ball in *.tar.gz
   	   do
   	     tar -zxf $ball
   	   done
   	 fi
   	 cd $ADSTROOT
   	 make
   
	 # Create the external TMVA version (only for the first time)
         if [ $ver == 1 ]; then
            source $startdir/setup/setup_TMVA.sh $startdir
            if [ ! -d $TMVASYS ]; then
               cd $startdir/setup
               for ball in *.tgz
               do
                  tar -zxf $ball
               done
            fi
            # Replace original Factory.cxx with edited one
            grep -q "TRANSFORMDIR" $startdir/setup/Factory.cxx.in
            if [ $? == 0 ]; then
              sed "s/TRANSFORMDIR/$basedir/g" $startdir/setup/Factory.cxx.in > $startdir/setup/Factory.cxx.mid
            fi
            diff -q $TMVASYS/src/Factory.cxx $startdir/setup/Factory.cxx.mid
            if [ $? != 0 ]; then
              cp $startdir/setup/Factory.cxx.mid $TMVASYS/src/Factory.cxx
            fi
            rm -fr $startdir/setup/Factory.cxx.mid
	    # TESTING!
            # Replace original MethodBase.cxx with edited one
            diff -q $TMVASYS/src/MethodBase.cxx $startdir/setup/MethodBase.cxx.in
            if [ $? != 0 ]; then
              cp $startdir/setup/MethodBase.cxx.in $TMVASYS/src/MethodBase.cxx
            fi
	    # TESTING!
            # Create the TMVA version
            cd $TMVASYS
            make
            if [ $? == 0 ]; then
               source $TMVASYS/test/setup.sh $TMVASYS
            fi
	 fi
      
         if [ $ver == 2 ]; then
           cd $startdir
           echo "#!/bin/bash" > $startdir/start.sh
           echo "dir=\`dirname \$0\`" >> $startdir/start.sh
           echo "" >> $startdir/start.sh
	   echo "function helptext()" >> $startdir/start.sh
	   echo "{" >> $startdir/start.sh
           echo "  echo \"Usage instructions:\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh old          (GUI with old offline version)\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh main old     (GUI with old offline version)\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh new          (GUI with new offline version)\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh main new     (GUI with new offline version)\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh rewrite old  (Batch rewrite with old offline version)\"" >> $startdir/start.sh
           echo "  echo \"   ./start.sh rewrite new  (Batch rewrite with new offline version)\"" >> $startdir/start.sh
	   echo "}" >> $startdir/start.sh
           echo "" >> $startdir/start.sh

	   echo "if [ \"\$1\" == \"help\" ]; then" >> $startdir/start.sh
	   echo "  helptext" >> $startdir/start.sh
	   echo "  exit 0" >> $startdir/start.sh
	   echo "fi" >> $startdir/start.sh
	   echo "" >> $startdir/start.sh

           echo "if [ \"\$1\" == \"old\" ] || [ \"\$1\" == \"new\" ]; then" >> $startdir/start.sh
	   echo "  offversion=\$1" >> $startdir/start.sh
           echo "elif [ \"\$2\" == \"old\" ] || [ \"\$2\" == \"new\" ]; then" >> $startdir/start.sh
	   echo "  offversion=\$2" >> $startdir/start.sh
           echo "fi" >> $startdir/start.sh
	   echo "" >> $startdir/start.sh

           echo "if [ \"\$offversion\" == \"old\" ]; then" >> $startdir/start.sh
           echo "  source $startdir/setup/setup_ADST.sh $startdir old" >> $startdir/start.sh
           echo "  cd $startdir" >> $startdir/start.sh
           echo "elif [ \"\$offversion\" == \"new\" ]; then" >> $startdir/start.sh
           echo "  source $startdir/setup/setup_ADST.sh $startdir new" >> $startdir/start.sh
           echo "  cd $startdir" >> $startdir/start.sh
           echo "else" >> $startdir/start.sh
           echo "  echo \"Error! No offline version supplied.\"" >> $startdir/start.sh
           echo "  helptext" >> $startdir/start.sh
  	   echo "  exit 1" >> $startdir/start.sh
           echo "fi" >> $startdir/start.sh
           echo "" >> $startdir/start.sh

           echo "rootdirectory=$rootdirectory" >> $startdir/start.sh
           echo "" >> $startdir/start.sh
           echo "if [ \$rootdirectory != -1 ]; then" >> $startdir/start.sh
           echo "  printenv ROOTSYS > /dev/null" >> $startdir/start.sh
           echo "  if [ \$? != 0 ]; then" >> $startdir/start.sh
           echo "    echo \"Preparing ROOT...\"" >> $startdir/start.sh
           echo "    source \$rootdirectory/bin/thisroot.sh" >> $startdir/start.sh
           echo "  fi" >> $startdir/start.sh
           echo "fi" >> $startdir/start.sh
           echo "" >> $startdir/start.sh

           echo "source $startdir/setup/setup_TMVA.sh $startdir" >> $startdir/start.sh
     	   echo "cd $TMVASYS" >> $startdir/start.sh
  	   echo "source $TMVASYS/test/setup.sh $TMVASYS" >> $startdir/start.sh
           echo "cd $startdir" >> $startdir/start.sh
           echo "" >> $startdir/start.sh

           cat $startdir/setup/start.sh.in >> $startdir/start.sh
           chmod ug+x $startdir/start.sh
      
           # In case we just want to set the workstation information, exit here
           if [ "$1" == "nomake" ]; then
             exit 0
           fi
         fi
      
	 # Create bin directory
         if [ ! -d $startdir/bin ]; then
           mkdir $startdir/bin
         fi
   
         # In case we do all, also execute Makefile
         if [ "$1" == "all" ]; then
           cd $startdir
           if [ -f $startdir/Makefile ]; then
             if [ $ver == 1 ]; then
               make auger-analysis-gui-old
               make support-old
               if [ $? != 0 ]; then
	          errorecho "Compiling of the old version of the program failed..."
		  exit 1
	       fi
             elif [ $ver == 2 ]; then
               make auger-analysis-gui-new
               make support-new
               if [ $? != 0 ]; then
	          errorecho "Compiling of the old version of the program failed..."
		  exit 1
	       fi
             fi
           fi
         # For only support, we just compile support programs
	 elif [ "$1" == "support" ]; then
           cd $startdir
           if [ -f $startdir/Makefile ]; then
             if [ $ver == 1 ]; then
               make support-old
               if [ $? != 0 ]; then
	          errorecho "Compiling of the old version of support programs failed..."
		  exit 1
	       fi
             elif [ $ver == 2 ]; then
               make support-new
               if [ $? != 0 ]; then
	          errorecho "Compiling of the old version of support programs failed..."
		  exit 1
	       fi
             fi
           fi
         fi
       done
     fi
   
     if [ "$1" == "clean" ]; then
       cd $startdir
       make clean
       rm -f Makefile
     fi
   fi
   
   exit 0
